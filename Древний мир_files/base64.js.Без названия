//--- BASE64 ---
var base64s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

function encode(decStr) {
	decStr=escape(decStr);
	var bits, dual, i = 0, encOut = '';

	while(decStr.length >= i + 3) {
		bits =
			(decStr.charCodeAt(i++) & 0xff) <<16 |
			(decStr.charCodeAt(i++) & 0xff) <<8  |
			decStr.charCodeAt(i++) & 0xff;
		encOut +=
			base64s.charAt((bits & 0x00fc0000) >>18) +
			base64s.charAt((bits & 0x0003f000) >>12) +
			base64s.charAt((bits & 0x00000fc0) >> 6) +
			base64s.charAt((bits & 0x0000003f));
	}

	if(decStr.length -i > 0 && decStr.length -i < 3) {
		dual = Boolean(decStr.length -i -1);
		bits =
			((decStr.charCodeAt(i++) & 0xff) <<16) |
			(dual ? (decStr.charCodeAt(i) & 0xff) <<8 : 0);
		encOut +=
			base64s.charAt((bits & 0x00fc0000) >>18) +
			base64s.charAt((bits & 0x0003f000) >>12) +
			(dual ? base64s.charAt((bits & 0x00000fc0) >>6) : '=') + '=';
	}

	return encOut
}

function decode(encStr) {
	var bits, decOut = '', i = 0;

	for(; i<encStr.length; i += 4) {
		bits =
			(base64s.indexOf(encStr.charAt(i))    & 0xff) <<18 |
			(base64s.indexOf(encStr.charAt(i +1)) & 0xff) <<12 |
			(base64s.indexOf(encStr.charAt(i +2)) & 0xff) << 6 |
			base64s.indexOf(encStr.charAt(i +3)) & 0xff;
			decOut += String.fromCharCode((bits & 0xff0000) >>16, (bits & 0xff00) >>8, bits & 0xff);
	}

	if(encStr.charCodeAt(i -2) == 61) {
		undecOut=decOut.substring(0, decOut.length -2);
	} else if(encStr.charCodeAt(i -1) == 61) {
		undecOut=decOut.substring(0, decOut.length -1);
	} else {
		undecOut=decOut;
	}

	return unescape(undecOut);
}

//--- end BASE64 ---

function encode_utf8(rohtext) {
// dient der Normalisierung des Zeilenumbruchs
	rohtext = rohtext.replace(/\r\n/g,"\n");
	var utftext = "";

	for(var n=0; n<rohtext.length; n++) {
		// ermitteln des Unicodes des  aktuellen Zeichens
		var c=rohtext.charCodeAt(n);
		// alle Zeichen von 0-127 => 1byte

		if (c<128) {
			utftext += String.fromCharCode(c);
			// alle Zeichen von 127 bis 2047 => 2byte
		} else if((c>127) && (c<2048)) {
			utftext += String.fromCharCode((c>>6)|192);
			utftext += String.fromCharCode((c&63)|128);
		} else {
			// alle Zeichen von 2048 bis 66536 => 3byte
			utftext += String.fromCharCode((c>>12)|224);
			utftext += String.fromCharCode(((c>>6)&63)|128);
			utftext += String.fromCharCode((c&63)|128);
		}
	}

	return utftext;
}

function decode_utf8(utftext) {
	var plaintext = "";
	var i=0;
	var c=c1=c2=0;
	// while-Schleife, weil einige Zeichen uebersprungen werden

	while(i<utftext.length) {
		c = utftext.charCodeAt(i);

		if (c<128) {
			plaintext += String.fromCharCode(c);
			i++;
		} else if((c>191) && (c<224)) {
			c2 = utftext.charCodeAt(i+1);
			plaintext += String.fromCharCode(((c&31)<<6) | (c2&63));
			i+=2;
		} else {
			c2 = utftext.charCodeAt(i+1);
			c3 = utftext.charCodeAt(i+2);
			plaintext += String.fromCharCode(((c&15)<<12) | ((c2&63)<<6) | (c3&63));
			i+=3;
		}
	}

	return plaintext;
}
